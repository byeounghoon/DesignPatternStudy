//
//  RepositoryViewController.swift
//  CleanSwift
//
//  Created by ByoungHoon Yun on 15/06/2019.
//  Copyright (c) 2019 ByoungHoon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GitHubAPI

protocol RepositoryDisplayLogic: class {
    
    func displaySomething(viewModel: Repository.Something.ViewModel)
}

class RepositoryViewController: UIViewController, RepositoryDisplayLogic {
    
    var interactor: RepositoryBusinessLogic?
    var router: (NSObjectProtocol & RepositoryRoutingLogic & RepositoryDataPassing)?
    
    static let reusedCellID = "ReusedCellID"
    var repos = [GitHubRepository]()
    
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            tableView.delegate = self
            tableView.dataSource = self
            
            tableView.rowHeight = UITableView.automaticDimension
            tableView.tableFooterView = UIView()
        }
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = RepositoryInteractor()
        let presenter = RepositoryPresenter()
        let router = RepositoryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
//
//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//
//        if let scene = segue.identifier {
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                router.perform(selector, with: segue)
//            }
//        }
//    }
//
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchRepositories()
    }
    
    // MARK: Do something
    
    func fetchRepositories() {
        let request = Repository.Something.Request(keyword: "SwiftUI")
        interactor?.requestRepository(request: request)
    }
    
    func displaySomething(viewModel: Repository.Something.ViewModel) {
        self.repos = viewModel.list
        self.tableView.reloadData()
    }
}



extension RepositoryViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return repos.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        var cell = tableView.dequeueReusableCell(withIdentifier: RepositoryViewController.reusedCellID)
        
        if cell == nil {
            
            cell = UITableViewCell(style: UITableViewCell.CellStyle.subtitle, reuseIdentifier: RepositoryViewController.reusedCellID)
            cell?.detailTextLabel?.numberOfLines = 0
        }
        
        let repository = repos[indexPath.row]
        cell?.textLabel?.text = repository.name
        cell?.detailTextLabel?.text = repository.description
        
        return cell!
    }
    
}
